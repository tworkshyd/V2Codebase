
DisplayBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a8b  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010a9  00000000  00000000  00001ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011f7  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  0000407c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00014fef  00000000  00000000  00004158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f0  00000000  00000000  00019147  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00019637  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004d72  00000000  00000000  0001967f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e1       	ldi	r30, 0x14	; 20
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	37 d0       	rcall	.+110    	; 0x18e <main>
 120:	77 c0       	rjmp	.+238    	; 0x210 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
 134:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 138:	8f b7       	in	r24, 0x3f	; 63
 13a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 13c:	f8 94       	cli
	return flags;
 13e:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
 140:	5f 93       	push	r21
 142:	50 e8       	ldi	r21, 0x80	; 128
 144:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
 14e:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 150:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
 152:	0f 90       	pop	r0
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <board_init>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 15a:	08 9a       	sbi	0x01, 0	; 1
 15c:	09 9a       	sbi	0x01, 1	; 1
 15e:	0a 9a       	sbi	0x01, 2	; 1
 160:	0b 9a       	sbi	0x01, 3	; 1
 162:	0c 9a       	sbi	0x01, 4	; 1
 164:	0d 9a       	sbi	0x01, 5	; 1
 166:	0e 9a       	sbi	0x01, 6	; 1
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 168:	10 98       	cbi	0x02, 0	; 2
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 16a:	11 9a       	sbi	0x02, 1	; 2
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 16c:	12 98       	cbi	0x02, 2	; 2
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 16e:	13 9a       	sbi	0x02, 3	; 2
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 170:	14 98       	cbi	0x02, 4	; 2
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 172:	15 9a       	sbi	0x02, 5	; 2
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 174:	16 98       	cbi	0x02, 6	; 2
 176:	08 95       	ret

00000178 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 178:	04 c0       	rjmp	.+8      	; 0x182 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 17a:	61 50       	subi	r22, 0x01	; 1
 17c:	71 09       	sbc	r23, r1
 17e:	81 09       	sbc	r24, r1
 180:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 182:	61 15       	cp	r22, r1
 184:	71 05       	cpc	r23, r1
 186:	81 05       	cpc	r24, r1
 188:	91 05       	cpc	r25, r1
 18a:	b9 f7       	brne	.-18     	; 0x17a <__portable_avr_delay_cycles+0x2>
 18c:	08 95       	ret

0000018e <main>:
* Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
*/
#include <asf.h>

int main (void)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	00 d0       	rcall	.+0      	; 0x194 <main+0x6>
 194:	1f 92       	push	r1
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
 19a:	c4 df       	rcall	.-120    	; 0x124 <sysclk_init>
	
	volatile unsigned long  freq;
	
	freq = sysclk_get_main_hz();
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	94 e2       	ldi	r25, 0x24	; 36
 1a0:	a4 ef       	ldi	r26, 0xF4	; 244
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	89 83       	std	Y+1, r24	; 0x01
 1a6:	9a 83       	std	Y+2, r25	; 0x02
 1a8:	ab 83       	std	Y+3, r26	; 0x03
 1aa:	bc 83       	std	Y+4, r27	; 0x04
	freq = sysclk_get_source_clock_hz ();
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	92 e1       	ldi	r25, 0x12	; 18
 1b0:	aa e7       	ldi	r26, 0x7A	; 122
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	89 83       	std	Y+1, r24	; 0x01
 1b6:	9a 83       	std	Y+2, r25	; 0x02
 1b8:	ab 83       	std	Y+3, r26	; 0x03
 1ba:	bc 83       	std	Y+4, r27	; 0x04

	freq += 10;
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	9a 81       	ldd	r25, Y+2	; 0x02
 1c0:	ab 81       	ldd	r26, Y+3	; 0x03
 1c2:	bc 81       	ldd	r27, Y+4	; 0x04
 1c4:	0a 96       	adiw	r24, 0x0a	; 10
 1c6:	a1 1d       	adc	r26, r1
 1c8:	b1 1d       	adc	r27, r1
 1ca:	89 83       	std	Y+1, r24	; 0x01
 1cc:	9a 83       	std	Y+2, r25	; 0x02
 1ce:	ab 83       	std	Y+3, r26	; 0x03

	board_init();
 1d0:	bc 83       	std	Y+4, r27	; 0x04
 1d2:	c3 df       	rcall	.-122    	; 0x15a <board_init>
	
	/* Insert application code here, after the board has been initialized. */

	int value = 0;
	
	value = freq;
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	9a 81       	ldd	r25, Y+2	; 0x02
 1d8:	ab 81       	ldd	r26, Y+3	; 0x03
 1da:	bc 81       	ldd	r27, Y+4	; 0x04

	while (1)
	{
		value = ~value;
 1dc:	8c 01       	movw	r16, r24
 1de:	00 95       	com	r16
 1e0:	10 95       	com	r17
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
 1e2:	89 2b       	or	r24, r25
 1e4:	11 f0       	breq	.+4      	; 0x1ea <main+0x5c>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 1e6:	11 9a       	sbi	0x02, 1	; 2
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <main+0x5e>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 1ea:	11 98       	cbi	0x02, 1	; 2
//  		ioport_set_pin_level(BUZZER,	 value);
		ioport_set_pin_level(LED_1_UL0,	 ~value);
		delay_us(1);
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	c1 df       	rcall	.-126    	; 0x178 <__portable_avr_delay_cycles>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
 1f6:	01 15       	cp	r16, r1
 1f8:	11 05       	cpc	r17, r1
 1fa:	11 f0       	breq	.+4      	; 0x200 <main+0x72>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 1fc:	11 9a       	sbi	0x02, 1	; 2
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <main+0x74>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 200:	11 98       	cbi	0x02, 1	; 2
		ioport_set_pin_level(LED_1_UL0,	 value);
		delay_us(5);
 202:	67 e0       	ldi	r22, 0x07	; 7
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	b6 df       	rcall	.-148    	; 0x178 <__portable_avr_delay_cycles>
	
	value = freq;

	while (1)
	{
		value = ~value;
 20c:	c8 01       	movw	r24, r16
// 		delay_ms(100);
// 		ioport_set_pin_level(LED_6_UL5,	 ~value);
// 		delay_ms(1000);
		
		
	}
 20e:	e6 cf       	rjmp	.-52     	; 0x1dc <main+0x4e>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
